<?

/*
 * Constants and functions
 */

/* Map from card name to hardware address */

$CARD_ADDRESS = array(
  "psc" => 0x01,
  "cc"  => 0x02,
  "rc1" => 0x03,
  "rc2" => 0x04,
  "rc3" => 0x05,
  "rc4" => 0x06,
  "bc1" => 0x07,
  "bc2" => 0x08,
  "bac" => 0x08,
  "bc3" => 0x09,
  "ac"  => 0x0a
);

$CARD_ERRBITS = array(
  "psc" => 0x00000007,
  "ac"  => 0x38000000,
  "bc1" => 0x07000000,
  "bc2" => 0x00e00000,
  "bac" => 0x00e00000,
  "bc3" => 0x001c0000,
  "rc1" => 0x00038000,
  "rc2" => 0x00007000,
  "rc3" => 0x00000e00,
  "rc4" => 0x000001c0,
  "cc"  => 0x00000038
);

/* Some default hw_rev values... implemented as needed */

if (!key_exists("rc", $hw_rev))
    $hw_rev["rc"] = "revF";
if (!key_exists("bc", $hw_rev))
    $hw_rev["bc"] = "revF";

/* backwards compatibility */
if (!isset($hw_mux11d))
    $hw_mux11d = 0;

/* hybrid RS backwards compatibility */
$num_rows_ac = 41;
$num_rows_rc = $num_rows_ac;

/* optional extension of the number of rows readout for hybrid MUX */
if (isset($hw_num_rows))
   $num_rows_rc=$hw_num_rows;

/* Use banked addressing? */
if (($num_rows_rc > 55) ||
    (isset($force_bank_scheme1) && $force_bank_scheme1)) {
   $use_bank_scheme1 = 1;
} else {
   $use_bank_scheme1 = 0;
}

/* "sys" cards -- order and eligibility */

$SYS_CARDS = array(
 "cc", "rc1", "rc2", "rc3", "rc4", "bc1", "bc2", "bac", "bc3", "ac"
);


/* All possible readout cards. */

$RC_LIST = array("rc1", "rc2", "rc3", "rc4");



/* Functions for mappings */


function rc_map($param) {
    global $rc_present, $RC_LIST;
    $out = "";
    $indent = "                        ";
    foreach ($rc_present as $i => $ok) {
        if (! $ok) continue;
        $count = 8;
        $start = $i * 8;
        $rc = $RC_LIST[$i];
        $out .= $indent . "{\n" .
        $indent . "    start = {$start}; count = {$count}; card = \"{$rc}\";\n"
        . $indent . "    param = \"{$param}\"; offset = 0;\n" .
        $indent . "},\n";
    }
    // Remove final comma
    $out = substr($out,0,-2) . "\n";
    return $out;
}

function fw_range($card, $min=NULL, $max=NULL) {
  global $fw_rev;
  if (($min != NULL) && ($fw_rev[$card] < $min))
    return FALSE;
  if (($max != NULL) && ($fw_rev[$card] > $max))
    return FALSE;
  return TRUE;
}

function map_array($prefix, $count, $card, $length, $dest=NULL,
        $source_offset=0, $dest_offset=0) {
  /* For fast SQ2 feedback.  Includes trailing command and line feed. */
  $output = "";
  $indent = "                ";
  if ($dest==NULL)
    $dest = $prefix;
  for ($i=0; $i<$count; $i++) {
    $source_i = $i + $source_offset;
    $dest_i = $i + $dest_offset;
    $output .= $indent . "{\n" .
        $indent . "    name = \"{$dest}{$dest_i}\";\n" .
        $indent . "    count = {$length};\n" .
        $indent . "    maps = (\n" .
        $indent . "        {\n" .
        $indent . "            start = 0; count = {$length}; " .
        "card = \"{$card}\";\n" .
        $indent . "            param = \"{$prefix}{$source_i}\"; " .
        "offset = 0;\n" .
        $indent . "        }\n" .
        $indent . "    );\n" .
        $indent . "},\n";
  }
  return $output;
}


/*
 * Useful pre-computations
 */

/* List of card addresses to which "sys" will be broadcast. */

$sys_id_list = array();
foreach ($SYS_CARDS as $card)
  if (in_array($card, $card_list))
    array_push($sys_id_list, sprintf("0x%02x", $CARD_ADDRESS[$card]));


/* List of card addresses to which "rca" will be broadcast. */

$rca_id_list = array();
foreach ($RC_LIST as $card)
  if (in_array($card, $card_list))
    array_push($rca_id_list, sprintf("0x%02x", $CARD_ADDRESS[$card]));


/* Compute flags for readout cards in this system. */

$rc_present = array();
$num_rc = 0;
foreach( $RC_LIST as $rc ) {
  array_push($rc_present, in_array($rc, $card_list));
  $num_rc += 1;
}


/* Squid systems (bias card DAC sets) have width based on maximum RC
   number */

foreach ($rc_present as $i => $ok) {
  if ($ok) $num_columns = ($i+1)*8;
}


/* Frequently used hardware/firmware support flags: */

/* Are we running with a biasing address card? */
$hw_bac = in_array("bac", $card_list);

/* Do we have a heater virtual card? */
$heater_virt = in_array("heater", $virt_list);

/* Are these 12-line TES bias cards? */
$hw_12tes = $hw_rev["bc"] >= "revE";

/* Does bias card firmware support fast switching? */
$fw_rev_bc_fast = fw_range("bc", $min=0x5000002);

/* Does clock card firmware support AWG? */
$fw_rev_cc_awg = fw_range("cc", $min=0x5000003);

/* Does clock card firmware support remote configuration? */
$fw_rev_cc_jtag = fw_range("cc", $min=0x5000005);

/* Does RC support pterm decay bits? */
$has_pterm = fw_range("rc", $min=0x5010009) && $hw_rev["rc"] >= "revE";

/* Does RC support servo reset? */
$does_servo_rst = fw_range("rc", $min=0x5020000) && $hw_rev["rc"] >= "revE";

/* Does RC support configurable filter? */
$has_filt_cfg = fw_range("rc", $min=0x5010000);

/* Does RC support integral clamp? */
$has_iterm_clamp = fw_range("rc", $min=0x500000f);

/* Does system support banked addressing for 64-row muxing? */
$has_bank_scheme1 = (fw_range("cc", $min=0x6000000) &&
		     fw_range("rc", $min=0x6000000) &&
		     fw_range("bc", $min=0x6000000) &&
		     fw_range("ac", $min=0x6000000));

if ($use_bank_scheme1 && !$has_bank_scheme1) {
   fwrite(STDERR, "Error: bank_scheme1 requested or required, but " .
      "firmware does not support it.\n");
   exit(10);
}

?>
